# -*- coding: utf-8 -*-
"""dnn_tactode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nCbNo3duNVcyE5FqytFPEJvJMi-7U4Ws

##Check GPU configured
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow as tf

print("Using TensorFlow version", tf.__version__)

config = tf.ConfigProto()
config.gpu_options.allow_growth = True

with tf.device('/gpu:0'):
  random_image_gpu = tf.random_normal((100, 100, 100, 3))
  net_gpu = tf.layers.conv2d(random_image_gpu, 32, 7)
  net_gpu = tf.reduce_sum(net_gpu)
  
sess = tf.Session(config=config)

try:
  sess.run(tf.global_variables_initializer())
  print('ok')
except tf.errors.InvalidArgumentError:
  print(
      '\n\nThis error most likely means that this notebook is not '
      'configured to use a GPU.  Change this in Notebook Settings via the '
      'command palette (cmd/ctrl-shift-P) or the Edit menu.\n\n')
  raise

device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

"""##Connecting to Google Drive"""

# Commented out IPython magic to ensure Python compatibility.
from os.path import join
from google.colab import drive

ROOT = "/content/drive"
drive.mount(ROOT)

PROJ = "My Drive" # This is a custom path.
PROJECT_PATH = join(ROOT, PROJ)

# %cd ~/content
# %cd drive/My Drive

"""##Git cloneing"""

# Commented out IPython magic to ensure Python compatibility.
#!git clone GIT_REPO_WITH_DATASET
# %cd ~
# %cd /content/drive/My Drive/dnn_tactode
!git clone https://github.com/tensorflow/models.git

"""##Creating blank images"""

# Commented out IPython magic to ensure Python compatibility.
# %cd annotations

!mkdir trimaps

import os
from PIL import Image
image = Image.new('RGB', (300, 300))

for filename in os.listdir('xmls'):
  filename = os.path.splitext(filename)[0]
  image.save('trimaps/' + filename + '.png')

"""##Compile object_detection API"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/models/research
!pwd
!protoc object_detection/protos/*.proto --python_out=.

"""##Install all Apis"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/models/research
!pip install .

"""##Install tf-slim"""

!pip install --upgrade tf-slim

"""## Adding system variables"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/
import os
os.environ['PYTHONPATH'] += ':/content/drive/My Drive/dnn_tactode/models'
os.environ['PYTHONPATH'] += ':/content/drive/My Drive/dnn_tactode/models/research'
os.environ['PYTHONPATH'] += ':/content/drive/My Drive/dnn_tactode/models/research/slim'
os.environ['PYTHONPATH'] += ':/content/drive/My Drive/dnn_tactode/models/research/object_detection'
import sys
sys.path.append("/content/drive/My Drive/dnn_tactode/models")
sys.path.append("/content/drive/My Drive/dnn_tactode/models/research")
sys.path.append("/content/drive/My Drive/dnn_tactode/models/research/slim")
sys.path.append("/content/drive/My Drive/dnn_tactode/models/research/object_detection")
!python models/research/object_detection/builders/model_builder_tf1_test.py

"""##Generate traning and validation dataset"""

!python create_tf_record.py \
    --data_dir=!pwd \
    --output_dir=!pwd

"""##Download and unzip pre-trained model"""

import os
import shutil
import glob
import urllib
import tarfile
import urllib.request


MODEL = 'ssd_mobilenet_v1_coco_2018_01_28'
MODEL_FILE = MODEL + '.tar.gz'
DOWNLOAD_BASE = 'http://download.tensorflow.org/models/object_detection/'
DEST_DIR = 'pretrained_model'

!mkdir "pretrained_model"

if not (os.path.exists(MODEL_FILE)):
  opener = urllib.request.URLopener()
  opener.retrieve(DOWNLOAD_BASE + MODEL_FILE, MODEL_FILE)

tar = tarfile.open(MODEL_FILE)
tar.extractall()
tar.close()

os.remove(MODEL_FILE)
if (os.path.exists(DEST_DIR)):
  shutil.rmtree(DEST_DIR)
os.rename(MODEL, DEST_DIR)

"""##Modify pipline.config file"""

import re

filename = '/content/drive/My Drive/dnn_tactode/pretrained_model/pipeline.config'
with open(filename) as f:
  s = f.read()
with open(filename, 'w') as f:
  s = re.sub('PATH_TO_BE_CONFIGURED/model.ckpt', '/content/drive/My Drive/dnn_tactode/pretrained_model/model.ckpt', s)
  s = re.sub('PATH_TO_BE_CONFIGURED/mscoco_train.record', '/content/drive/My Drive/dnn_tactode/train.record', s)
  s = re.sub('PATH_TO_BE_CONFIGURED/mscoco_val.record', '/content/drive/My Drive/dnn_tactode/val.record', s)
  s = re.sub('PATH_TO_BE_CONFIGURED/mscoco_label_map.pbtxt', '/content/drive/My Drive/dnn_tactode/annotations/label_map.pbtxt', s)
  f.write(s)

"""##Train new model"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/
!python models/research/object_detection/model_main.py \
    --pipeline_config_path="/content/drive/My Drive/dnn_tactode/pretrained_model/pipeline.config" \
    --model_dir="/content/drive/My Drive/dnn_tactode/trained" \
    --alsologtostderr \
    --num_train_steps=50000

"""##Finetune new trained model"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/
import os
lst = os.listdir('trained')
lf = filter(lambda k: 'model.ckpt-' in k, lst)
last_model = sorted(lf)[-1].replace('.meta', '')

!python models/research/object_detection/export_inference_graph.py \
    --input_type=image_tensor \
    --pipeline_config_path="/content/drive/My Drive/dnn_tactode/pretrained_model/pipeline.config" \
    --output_directory=fine_tuned_model \
    --trained_checkpoint_prefix=trained/$last_model

"""##Validation"""

# Commented out IPython magic to ensure Python compatibility.
# %cd ~
# %cd /content
# %cd drive/My Drive/dnn_tactode/models/research/object_detection/

import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image

# This is needed since the notebook is stored in the object_detection folder.
sys.path.append("..")
from object_detection.utils import ops as utils_ops

# This is needed to display the images.
# %matplotlib inline

from utils import label_map_util
from utils import visualization_utils as vis_util

# What model to download.
# Path to frozen detection graph. This is the actual model that is used for the object detection.
PATH_TO_CKPT = '/content/drive/My Drive/dnn_tactode/fine_tuned_model' + '/frozen_inference_graph.pb'

# List of the strings that is used to add correct label for each box.
PATH_TO_LABELS = os.path.join('/content/drive/My Drive/dnn_tactode/annotations', 'label_map.pbtxt')

NUM_CLASSES = 32

detection_graph = tf.Graph()
with detection_graph.as_default():
  od_graph_def = tf.GraphDef()
  with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
    serialized_graph = fid.read()
    od_graph_def.ParseFromString(serialized_graph)
    tf.import_graph_def(od_graph_def, name='')
       
    
label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)
category_index = label_map_util.create_category_index(categories)

def load_image_into_numpy_array(image):
  (im_width, im_height) = image.size
  return np.array(image.getdata()).reshape(
      (im_height, im_width, 3)).astype(np.uint8)

# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.
PATH_TO_TEST_IMAGES_DIR = '/content/drive/My Drive/dnn_tactode/test/'
TEST_IMAGE_PATHS = [ os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image-{}.jpg'.format(i)) for i in range(1, 5) ]

# Size, in inches, of the output images.
IMAGE_SIZE = (12, 8)




def run_inference_for_single_image(image, graph):
  with graph.as_default():
    with tf.Session() as sess:
      # Get handles to input and output tensors
      ops = tf.get_default_graph().get_operations()
      all_tensor_names = {output.name for op in ops for output in op.outputs}
      tensor_dict = {}
      for key in [
          'num_detections', 'detection_boxes', 'detection_scores',
          'detection_classes', 'detection_masks'
      ]:
        tensor_name = key + ':0'
        if tensor_name in all_tensor_names:
          tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(
              tensor_name)
      if 'detection_masks' in tensor_dict:
        # The following processing is only for single image
        detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
        detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
        # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
        real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
        detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
        detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
            detection_masks, detection_boxes, image.shape[0], image.shape[1])
        detection_masks_reframed = tf.cast(
            tf.greater(detection_masks_reframed, 0.5), tf.uint8)
        # Follow the convention by adding back the batch dimension
        tensor_dict['detection_masks'] = tf.expand_dims(
            detection_masks_reframed, 0)
      image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')

      # Run inference
      output_dict = sess.run(tensor_dict,
                             feed_dict={image_tensor: np.expand_dims(image, 0)})

      # all outputs are float32 numpy arrays, so convert types as appropriate
      output_dict['num_detections'] = int(output_dict['num_detections'][0])
      output_dict['detection_classes'] = output_dict[
          'detection_classes'][0].astype(np.uint8)
      output_dict['detection_boxes'] = output_dict['detection_boxes'][0]
      output_dict['detection_scores'] = output_dict['detection_scores'][0]
      if 'detection_masks' in output_dict:
        output_dict['detection_masks'] = output_dict['detection_masks'][0]
  return output_dict




for image_path in TEST_IMAGE_PATHS:
  image = Image.open(image_path)
  # the array based representation of the image will be used later in order to prepare the
  # result image with boxes and labels on it.
  image_np = load_image_into_numpy_array(image)
  # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
  image_np_expanded = np.expand_dims(image_np, axis=0)
  # Actual detection.
  output_dict = run_inference_for_single_image(image_np, detection_graph)
  # Visualization of the results of a detection.
  vis_util.visualize_boxes_and_labels_on_image_array(
      image_np,
      output_dict['detection_boxes'],
      output_dict['detection_classes'],
      output_dict['detection_scores'],
      category_index,
      instance_masks=output_dict.get('detection_masks'),
      use_normalized_coordinates=True,
      line_thickness=8)
  plt.figure(figsize=IMAGE_SIZE)
  plt.imshow(image_np)